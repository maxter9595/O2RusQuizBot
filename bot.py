import os
import time
import random
import re

import django
import telebot
from telebot import types
from openpyxl import Workbook
from django.utils import timezone
from django.contrib.auth.hashers import make_password, check_password

os.environ.setdefault(
    key='DJANGO_SETTINGS_MODULE',
    value='quiz.settings'
)
django.setup()

from quiz.settings import BOT_TOKEN
from tgbot.models import Authorization, CustomUser, PointsTransaction, Question, Tournament, PointsTournament, Standings

bot = telebot.TeleBot(BOT_TOKEN)


def update_tournament_points(telegram_id):
    """"
    –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–µ –æ—á–∫–∏, –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ –≤—Ä–µ–º—è —Ç—É—Ä–Ω–∏—Ä–∞
    """
    auth_data = Authorization.objects.filter(
        telegram_id=telegram_id,
    )
    telegram_id = auth_data.first()

    tournament_sender_data = PointsTournament.objects.filter(
        sender_telegram_id=telegram_id,
    )

    if tournament_sender_data:
        tournament_points = 0
        points_received_or_transferred = 0
        bonuses = 0
        total_transfer_loss = 0
        total_transfer_income = 0

        for item in tournament_sender_data:
            tournament_points += item.tournament_points if item.tournament_points else 0
            points_received_or_transferred += item.points_received_or_transferred if item.points_received_or_transferred else 0
            bonuses += item.bonuses if item.bonuses else 0
            total_transfer_loss += item.points_transferred if item.points_transferred else 0

        sender_data_vals = [
            tournament_points,
            points_received_or_transferred,
            bonuses,
        ]

        tournament_receiver_data = PointsTournament.objects.filter(
            receiver_telegram_id=telegram_id,
        )

        if tournament_receiver_data:
            for item in tournament_receiver_data:
                total_transfer_income += item.points_transferred if item.points_transferred else 0

        standing_participant = Standings.objects.filter(
            participant_telegram=telegram_id,
        )

        auth_data = Authorization.objects.filter(
            telegram_id=telegram_id,
        )

        if not standing_participant.exists() and auth_data.exists():
            standing_participant = Standings(
                participant_telegram=telegram_id,
                full_name=auth_data.first().full_name,
            ).save()

            standing_participant = Standings.objects.filter(
                participant_telegram=telegram_id,
            )

        if standing_participant:
            standing_participant.update(
                tournament_points=sum(
                    sender_data_vals
                ) + (
                    total_transfer_income - total_transfer_loss
                ),
            )

            standing_participant.update(
                total_points=standing_participant.first().quiz_points + standing_participant.first().tournament_points
            )


def update_quiz_points(telegram_id):
    """"
    –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–µ –æ—á–∫–∏, –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    """
    auth_data = Authorization.objects.filter(
        telegram_id=telegram_id,
    )
    telegram_id = auth_data.first()

    tournament_sender_data = PointsTransaction.objects.filter(
        sender_telegram_id=telegram_id,
    )

    if tournament_sender_data:
        tournament_points = 0
        points_received_or_transferred = 0
        bonuses = 0
        total_transfer_loss = 0
        total_transfer_income = 0

        for item in tournament_sender_data:
            tournament_points += item.tournament_points if item.tournament_points else 0
            points_received_or_transferred += item.points_received_or_transferred if item.points_received_or_transferred else 0
            bonuses += item.bonuses if item.bonuses else 0
            total_transfer_loss += item.points_transferred if item.points_transferred else 0

        sender_data_vals = [
            tournament_points,
            points_received_or_transferred,
            bonuses,
        ]

        tournament_receiver_data = PointsTransaction.objects.filter(
            receiver_telegram_id=telegram_id,
        )

        if tournament_receiver_data:
            for item in tournament_receiver_data:
                total_transfer_income += item.points_transferred if item.points_transferred else 0

        standing_participant = Standings.objects.filter(
            participant_telegram=telegram_id,
        )

        auth_data = Authorization.objects.filter(
            telegram_id=telegram_id,
        )

        if not standing_participant.exists() and auth_data.exists():
            standing_participant = Standings(
                participant_telegram=telegram_id,
                full_name=auth_data.first().full_name,
            ).save()

            standing_participant = Standings.objects.filter(
                participant_telegram=telegram_id,
            )

        if standing_participant:
            standing_participant.update(
                quiz_points=sum(
                    sender_data_vals
                ) + (
                    total_transfer_income - total_transfer_loss
                )
            )

            standing_participant.update(
                total_points=standing_participant.first().quiz_points + standing_participant.first().tournament_points
            )


@bot.message_handler(commands=['start'])
def start(message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    markup_start = True
    user_auth = Authorization.objects.filter(telegram_id=message.from_user.id)

    if user_auth.exists():
        user_id = user_auth.first().id
        custom_user = CustomUser.objects.filter(id=user_id)

        if custom_user.exists():
            if custom_user.first().is_authorized:
                bot.send_message(
                    chat_id=message.chat.id,
                    text='–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã',
                )
                markup_start = False

    if markup_start:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message=message,
            text='\n'.join([
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                'üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register',
                'üîí –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login',
                'üîí –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ /password'
            ]),
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in message.text or message.text == "/register")
def register(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    chat_id = message.chat.id
    uid = message.from_user.id

    if Authorization.objects.filter(telegram_id=uid).exists():
        response = bot.reply_to(
            message=message,
            text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        )

    else:
        response = bot.reply_to(
            message=message,
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        bot.register_next_step_handler(
            response,
            process_full_name
        )


def process_full_name(message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    full_name = message.text

    response = bot.reply_to(
        message=message,
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä - 07.07.2007):"
    )

    bot.register_next_step_handler(
        response,
        process_date_of_birth,
        full_name=full_name
    )


def process_date_of_birth(message, full_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    date_of_birth = message.text
    date_pattern = re.compile(r'\d{2}.\d{2}.\d{4}')

    if date_pattern.fullmatch(date_of_birth):
        date_of_birth = '-'.join(date_of_birth.split('.')[::-1])

        response = bot.reply_to(
            message=message,
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8xxxxxxxxxx (–ø—Ä–∏–º–µ—Ä - 89053743009):"
        )
        bot.register_next_step_handler(
            response,
            process_phone_number,
            full_name=full_name,
            date_of_birth=date_of_birth
        )

    else:
        bot.reply_to(
            message=message,
            text="–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        )


def process_phone_number(message, full_name, date_of_birth):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±—É–¥—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    phone_number = message.text
    phone_pattern = re.compile(r'^[8-9]\d{10}$')

    if phone_pattern.match(phone_number):
        response = bot.reply_to(
            message=message,
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
        )
        bot.register_next_step_handler(
            response,
            process_password_registration,
            full_name=full_name,
            date_of_birth=date_of_birth,
            phone_number=phone_number
        )

    else:
        bot.reply_to(
            message=message,
            text="–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        )


def process_password_registration(message, full_name, date_of_birth, phone_number):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ Authorization
    """
    password = message.text
    hashed_password = make_password(password)
    uid = message.from_user.id

    authorization = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if not authorization.exists():
        auth_user = Authorization.objects.create(
            uid=message.from_user.id,
            registration_datetime=timezone.now(),
            full_name=full_name,
            date_of_birth=date_of_birth,
            phone_number=phone_number,
            telegram_nickname=message.from_user.username,
            telegram_id=message.from_user.id,
            role_id=3
        )

        CustomUser.objects.filter(
            username_id=auth_user.id
        ).update(
            password=hashed_password
        )

        bot.reply_to(
            message=message,
            text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /login"
        )

    else:
        bot.reply_to(
            message,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )


@bot.message_handler(func=lambda message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in message.text or message.text == "/login")
def login(message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    uid = message.from_user.id
    auth_data = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if not auth_data.exists():
        bot.reply_to(
            message=message,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register"
        )

    else:
        auth_obj = auth_data.first()
        custom_user = CustomUser.objects.filter(
            username_id=auth_obj.id
        ).first()

        if custom_user.is_authorized:
            bot.reply_to(
                message,
                "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã."
            )
        else:
            process_login_data(
                message,
                custom_user
            )


def process_login_data(message, custom_user):
    """
    –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    response = bot.reply_to(
        message,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
    )

    bot.register_next_step_handler(
        response,
        process_password,
        custom_user=custom_user
    )


def process_password(message, custom_user):
    """
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
    """
    input_password = message.text
    actual_password = custom_user.password

    if check_password(input_password, actual_password):
        custom_user.last_login = timezone.now()
        custom_user.is_authorized = True
        custom_user.save()

        main_menu(message)

    else:
        bot.reply_to(
            message,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        )


@bot.message_handler(func=lambda message: "–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å" in message.text or message.text == "/password")
def change_password(message):
    """
    –ú–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –µ–≥–æ
    """
    uid = message.from_user.id
    auth_data = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if not auth_data.exists():
        bot.reply_to(
            message=message,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register"
        )

    else:
        custom_user = CustomUser.objects.get(
            username_id=auth_data.first().id
        )

        if custom_user:
            if custom_user.is_authorized == False:
                response = bot.reply_to(
                    message,
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
                )

                bot.register_next_step_handler(
                    response,
                    callback=get_new_password,
                )

            else:
                bot.reply_to(
                    message,
                    "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –†–∞–∑–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: /logout"
                )


def get_new_password(message):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    """
    new_password = message.text

    hashed_password = make_password(new_password)
    uid = message.from_user.id

    auth_user = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if auth_user.exists():
        CustomUser.objects.filter(
            username_id=auth_user.first().id
        ).update(
            password=hashed_password
        )

        bot.reply_to(
            message=message,
            text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /login"
        )



@bot.message_handler(func=lambda message: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in message.text or message.text == "/main_menu")
def main_menu(message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    uid = message.from_user.id
    auth_data = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if not auth_data.exists():
        bot.reply_to(
            message=message,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register"
        )

    else:
        auth_obj = auth_data.first()
        custom_user = CustomUser.objects.filter(
            username_id=auth_obj.id
        ).first()

        if not custom_user.is_authorized:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            btn_start_quiz = types.KeyboardButton(
                text='–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
            )

            btn_add_points1 = types.KeyboardButton(
                text='–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∑–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
            )

            btn_add_points2 = types.KeyboardButton(
                text='–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∑–∞ —Ç—É—Ä–Ω–∏—Ä'
            )

            btn_tournament_rating1 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)'
            )

            btn_tournament_rating2 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)'
            )

            btn_participant_rating1 = types.KeyboardButton(
                text='–ú–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)'
            )

            btn_participant_rating2 = types.KeyboardButton(
                text='–ú–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)'
            )

            btn_answers_rating = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)'
            )

            btn_tour_statistics1 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–∞ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)'
            )

            btn_tour_statistics2 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)'
            )

            btn_tours_statistics1 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ç—É—Ä–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)'
            )

            btn_tours_statistics2 = types.KeyboardButton(
                text='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ç—É—Ä–Ω–∏—Ä–∞–º (—Ç—É—Ä–Ω–∏—Ä)'
            )

            if custom_user.role_id == 2:
                markup.add(
                    btn_logout,
                    btn_add_points1,
                    btn_add_points2,
                    btn_tournament_rating1,
                    btn_tournament_rating2,
                    btn_participant_rating1,
                    btn_participant_rating2,
                    btn_answers_rating,
                    btn_tour_statistics1,
                    btn_tour_statistics2,
                    btn_tours_statistics1,
                    btn_tours_statistics2
                )

            else:
                markup.add(
                    btn_logout,
                    btn_start_quiz,
                    btn_tournament_rating1,
                    btn_tournament_rating2,
                    btn_participant_rating1,
                    btn_participant_rating2,
                    btn_answers_rating,
                    btn_tour_statistics1,
                    btn_tour_statistics2,
                    btn_tours_statistics1,
                    btn_tours_statistics2
                )

            bot.reply_to(
                message,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=markup,
            )


@bot.message_handler(func=lambda message: '–í—ã—Ö–æ–¥' in message.text or message.text == '/logout')
def logout(message):
    """
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    uid = message.from_user.id
    auth_data = Authorization.objects.filter(
        telegram_id=str(uid)
    )

    if auth_data.exists():
        username_id = auth_data.first().id

        custom_user = CustomUser.objects.get(
            username_id=username_id
        )

        if custom_user.is_authorized:
            custom_user.is_authorized = False
            custom_user.save()

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                reply_markup=markup,
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: '–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∑–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É' in message.text or message.text == '/add_quiz_points')
def add_points_check_quiz(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫—É
    """
    is_AttributeError = False
    uid = message.from_user.id

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        username_id = user_auth_data.first().id
        custom_user = CustomUser.objects.get(
            username_id=username_id
        )

    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            user_auth_data = user_auth_data.first()

            if user_auth_data.role_id == 2:
                markup = types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                )

                btn_main_menu = types.KeyboardButton(
                    text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                )

                btn_logout = types.KeyboardButton(
                    text='–í—ã—Ö–æ–¥'
                )

                markup.add(
                    btn_main_menu,
                    btn_logout
                )

                text = '\n'.join([
                    '–í–≤–µ–¥–¥–∏—Ç–µ —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:',
                    '1 - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ –º–µ—Å—Ç–∞ —Å —à–∞–≥–æ–º 5 –±–∞–ª–ª–æ–≤',
                    '2 - –†–û–¢ (–ü–û–¢) [—É–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ü–∏—Ñ—Ä—É, –¥–µ–ª–∏–º –Ω–∞ /50 –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã]',
                    '3 - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ (–±–æ–Ω—É—Å—ã)',
                    '4 - –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏'
                ])

                response = bot.reply_to(
                    message,
                    text,
                    reply_markup=markup,
                )

                bot.register_next_step_handler(
                    response,
                    process_add_tour_quiz,
                    uid=uid
                )

            else:
                bot.reply_to(
                    message,
                    "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


def process_add_tour_quiz(message, **kwargs):
    """"
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ—Ä —Ç—É—Ä–∞
    """
    uid = kwargs.get('uid')
    points_type = message.text

    if points_type == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif points_type == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        reply = bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–∞:"
        )

        bot.register_next_step_handler(
            reply,
            process_add_question_number_quiz,
            uid=uid,
            points_type=points_type
        )


def process_add_question_number_quiz(message, **kwargs):
    """"
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞
    """
    points_type = kwargs.get('points_type')
    uid = kwargs.get('uid')
    tour = message.text

    if tour == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif tour == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if tour.isdigit():
            if int(tour) > 0:
                reply = bot.reply_to(
                    message,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:"
                )

                bot.register_next_step_handler(
                    reply,
                    process_add_points_type_quiz,
                    uid=uid,
                    tour=tour,
                    points_type=points_type
                )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç—É—Ä–∞ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç—É—Ä–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)"
            )


def process_add_points_type_quiz(message, **kwargs):
    """"
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    add_points_type = kwargs.get('points_type')
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = message.text

    if question_number == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif question_number == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if question_number.isdigit():
            if int(question_number) > 0:
                if add_points_type in ('1', '2', '3', '4'):
                    participants = Authorization.objects.all().filter(
                        role=3
                    )

                    participants_list = []
                    if participants:
                        for participant in participants:
                            part_id = participant.id
                            part_name = participant.full_name
                            part_nick = participant.telegram_nickname
                            part_tel_id = participant.telegram_id

                            participants_list.append(
                                f"{part_id}: {part_name}" + f" (Telegram: {part_nick}, {part_tel_id})"
                            )

                        total_participants = len(participants_list)
                        participants_list = "\n".join(participants_list)

                        bot.reply_to(
                            message,
                            f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n{participants_list}"
                        )

                        if len(participants_list) >= 1:
                            if add_points_type == '1':
                                response = bot.reply_to(
                                    message,
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_1_place_quiz,
                                    tour=tour,
                                    question_number=question_number,
                                    uid=uid,
                                    total_participants=total_participants,
                                )

                            elif add_points_type == '2':
                                response = bot.reply_to(
                                    message,
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–∞–ª–ª—ã"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_2_digit_quiz,
                                    tour=tour,
                                    question_number=question_number,
                                    uid=uid,
                                )

                            elif add_points_type == '3':
                                response = bot.reply_to(
                                    message,
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–∞–ª–ª—ã:"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_3_bonuses_quiz,
                                    tour=tour,
                                    question_number=question_number,
                                    uid=uid,
                                )

                            elif add_points_type == '4':
                                if len(participants_list) >= 2:
                                    response = bot.reply_to(
                                        message,
                                        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–±–∏—Ä–∞–µ–º –±–∞–ª–ª—ã –ø–æ –µ–≥–æ ID –≤ –ë–î:"
                                    )

                                    bot.register_next_step_handler(
                                        response,
                                        process_points_type_4_receiver_quiz,
                                        tour=tour,
                                        question_number=question_number,
                                        uid=uid,
                                    )

                                else:
                                    bot.reply_to(
                                        message,
                                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
                                    )

                    else:
                        bot.reply_to(
                            message,
                            "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)"
            )


def process_points_type_1_place_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –±—É–¥–µ–º –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã (1-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    total_participants = kwargs.get('total_participants')
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    text1 = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:'
                    text2 = '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ'
                    part_name = participant.full_name
                    part_nick = participant.telegram_nickname
                    part_tel_id = participant.telegram_id

                    response = bot.reply_to(
                        message,
                        f"{text1} {part_name} (Telegram: {part_nick}, {part_tel_id}). {text2} {total_participants}"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_1_place_points_quiz,
                        uid=uid,
                        tour=tour,
                        question_number=question_number,
                        participant=participant,
                        total_participants=total_participants
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_1_place_points_quiz(message, **kwargs):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫—É –∏ –∑–∞–Ω–æ—Å–∏—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É PointsTransaction (1-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """

    def create_points_dict(points=100, step=5, max_place=30):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–ª–∞–º–∏, –Ω–∞—á–∏—Å–ª—è–µ–º—ã–º–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –º–µ—Å—Ç–∞–º
        """
        points_dict = {}
        for place in range(1, max_place + 1):
            points_dict[place] = points
            points -= step
            if points < step:
                points = step
        return points_dict

    def calculate_points(points_dict, place):
        """
        –í—ã–≤–æ–¥–∏—Ç –æ—á–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–∞–Ω—è—Ç–æ–µ –º–µ—Å—Ç–æ
        """
        return points_dict.get(place, 0)

    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant = kwargs.get('participant')
    total_participants = kwargs.get('total_participants')
    place = message.text

    if place == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif place == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if place.isdigit():
            if int(place) > 0:
                if int(place) <= total_participants:
                    if total_participants <= 30:
                        points_dict = create_points_dict()
                    else:
                        points_dict = create_points_dict(
                            max_place=total_participants
                        )

                    points = calculate_points(
                        points_dict,
                        int(place)
                    )

                    transferor = Authorization.objects.get(
                        telegram_id=uid
                    )

                    question = Question.objects.get(
                        tour_id=int(tour),
                        tour_question_number_id=int(question_number)
                    )

                    if question:
                        participant_row = PointsTransaction.objects.filter(
                            sender_telegram_id=participant.telegram_id,
                            transferor_telegram_id=transferor.telegram_id,
                            question_id=question.id,
                        )

                        if not participant_row.exists():
                            PointsTransaction.objects.create(
                                sender_telegram_id=participant.telegram_id,
                                transferor_telegram_id=transferor.telegram_id,
                                question_id=question.id,
                                tournament_points=points,
                            )

                            update_quiz_points(
                                telegram_id=participant.telegram_id,
                            )

                        else:
                            participant_row.update(
                                tournament_points=points,
                                points_datetime=timezone.now(),
                            )

                            update_quiz_points(
                                telegram_id=participant.telegram_id,
                            )

                        bot.reply_to(
                            message,
                            f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.full_name} –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤ –∑–∞ {place} –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–µ"
                        )

                    else:
                        bot.reply_to(
                            message,
                            "–ü–∞—Ä–∞ '—Ç—É—Ä-–≤–æ–ø—Ä–æ—Å' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                        )

                else:
                    bot.reply_to(
                        message,
                        f"–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {total_participants}"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º)"
            )


def process_points_type_2_digit_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—â—É—é —Ü–∏—Ñ—Ä—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (2-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    response = bot.reply_to(
                        message,
                        "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Ü–∏—Ñ—Ä—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_2_pot_quiz,
                        uid=uid,
                        tour=tour,
                        question_number=question_number,
                        participant=participant,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_2_pot_quiz(message, **kwargs):
    """
    –î–µ–ª–∏–º —Ü–∏—Ñ—Ä—É –Ω–∞ 50 –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã. –§–∏–∫—Å–∏—Ä—É–µ–º –±–∞–ª–ª—ã –≤ —Ç–∞–±–ª–∏—Ü–µ PointsTransaction (2-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant = kwargs.get('participant')
    digit = message.text

    if digit == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif digit == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if digit.isdigit():
            if int(digit) > 0:
                points = int(digit) / 50
                transferor = Authorization.objects.get(
                    telegram_id=uid
                )

                question = Question.objects.get(
                    tour_id=int(tour),
                    tour_question_number_id=int(question_number)
                )

                if question:
                    participant_row = PointsTransaction.objects.filter(
                        sender_telegram_id=participant.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        question_id=question.id,
                    )

                    if not participant_row.exists():
                        PointsTransaction.objects.create(
                            sender_telegram_id=participant.telegram_id,
                            transferor_telegram_id=transferor.telegram_id,
                            question_id=question.id,
                            points_received_or_transferred=points,
                        )

                        update_quiz_points(
                            telegram_id=participant.telegram_id,
                        )

                    else:
                        participant_row.update(
                            points_received_or_transferred=points,
                            points_datetime=timezone.now(),
                        )

                        update_quiz_points(
                            telegram_id=participant.telegram_id,
                        )

                    bot.reply_to(
                        message,
                        f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.full_name} –ø–æ–ª—É—á–∏–ª {int(points)} –±–∞–ª–ª–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—â–µ–π —Ü–∏—Ñ—Ä—ã (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—â–µ–π —Ü–∏—Ñ—Ä—ã (–Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ)"
            )


def process_points_type_3_bonuses_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    response = bot.reply_to(
                        message,
                        f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤–≤–µ–¥–∏—Ç–µ 'random'):"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_3_random_quiz,
                        uid=uid,
                        tour=tour,
                        question_number=question_number,
                        participant=participant
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_3_random_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª 'random' (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant = kwargs.get('participant')
    bonuses = message.text

    if bonuses == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif bonuses == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if bonuses.isdigit():
            if int(bonuses) > 0:
                bonuses = int(bonuses)

                process_points_type_3_result_quiz(
                    message,
                    uid=uid,
                    tour=tour,
                    question_number=question_number,
                    participant=participant,
                    bonuses=bonuses
                )

            else:
                bot.reply_to(
                    message,
                    "–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            if bonuses == 'random':
                response = bot.reply_to(
                    message,
                    '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä - 1, 100):'
                )

                bot.register_next_step_handler(
                    response,
                    process_points_type_3_result_quiz,
                    uid=uid,
                    tour=tour,
                    question_number=question_number,
                    participant=participant,
                    bonuses=None
                )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –±–æ–Ω—É—Å–∞"
                )


def process_points_type_3_result_quiz(message, **kwargs):
    """
    –ó–∞–Ω–æ—Å–∏—Ç –±–æ–Ω—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É PointsTransaction (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    participant = kwargs.get('participant')
    bonuses = kwargs.get('bonuses')

    if bonuses is None:
        random_bonuses = message.text

        if random_bonuses == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            main_menu(message)

        elif random_bonuses == "–í—ã—Ö–æ–¥":
            logout(message)

        else:
            random_bonuses = random_bonuses.replace(' ', '').split(',')
            a = random_bonuses[0]
            b = random_bonuses[1]

            if a.isdigit() and b.isdigit():
                a = int(a)
                b = int(b)

                if a > 0 and b > 0:
                    if b > a:
                        bonuses = random.randint(a=a, b=b)

                    else:
                        bot.reply_to(
                            message,
                            "–î–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'a, b'"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–æ–Ω—É—Å–∞"
                )

    if bonuses:
        transferor = Authorization.objects.get(
            telegram_id=uid
        )

        question = Question.objects.get(
            tour_id=int(tour),
            tour_question_number_id=int(question_number)
        )

        if question and transferor:
            participant_row = PointsTransaction.objects.filter(
                sender_telegram_id=participant.telegram_id,
                transferor_telegram_id=transferor.telegram_id,
                question_id=question.id
            )

            if not participant_row.exists():
                PointsTransaction.objects.create(
                    sender_telegram_id=participant.telegram_id,
                    transferor_telegram_id=transferor.telegram_id,
                    question_id=question.id,
                    bonuses=bonuses
                )

                update_quiz_points(
                    telegram_id=participant.telegram_id,
                )

            else:
                participant_row.update(
                    bonuses=bonuses,
                    points_datetime=timezone.now(),
                )

                update_quiz_points(
                    telegram_id=participant.telegram_id,
                )

            bot.reply_to(
                message,
                f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {participant.full_name} –≤ —Ä–∞–∑–º–µ—Ä–µ {bonuses} –±–∞–ª–ª–æ–≤/–±–∞–ª–ª–∞"
            )


def process_points_type_4_receiver_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    sender_id = message.text

    if sender_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif sender_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if sender_id.isdigit():
            if int(sender_id) > 0:
                sender = Authorization.objects.get(
                    id=sender_id
                )

                if sender:
                    response_receiver = bot.reply_to(
                        message,
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ –µ–≥–æ ID –≤ –ë–î:"
                    )

                    bot.register_next_step_handler(
                        response_receiver,
                        process_points_type_4_amount_quiz,
                        tour=tour,
                        question_number=question_number,
                        uid=uid,
                        sender=sender,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_4_amount_quiz(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    sender = kwargs.get('sender')
    receiver_id = message.text

    if receiver_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif receiver_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        receiver = Authorization.objects.get(
            id=receiver_id
        )

        if int(receiver.telegram_id) != int(sender.telegram_id):
            if receiver:
                if receiver.role_id == 3:
                    response = bot.reply_to(
                        message,
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤:"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_4_result_quiz,
                        tour=tour,
                        question_number=question_number,
                        uid=uid,
                        sender=sender,
                        receiver=receiver,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ"
            )


def process_points_type_4_result_quiz(message, **kwargs):
    """
    –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É PointsTransaction (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tour = kwargs.get('tour')
    question_number = kwargs.get('question_number')
    sender = kwargs.get('sender')
    receiver = kwargs.get('receiver')
    amount = message.text

    if amount == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif amount == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if amount.isdigit():
            amount = int(amount)
            if amount > 0:
                transferor = Authorization.objects.get(
                    telegram_id=uid
                )

                question = Question.objects.get(
                    tour_id=int(tour),
                    tour_question_number_id=int(question_number)
                )

                if question:
                    transaction_row11 = PointsTransaction.objects.filter(
                        sender_telegram_id=sender.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        question_id=question.id,
                    )

                    transaction_row12 = PointsTransaction.objects.filter(
                        sender_telegram_id=sender.telegram_id,
                        receiver_telegram_id=receiver.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        question_id=question.id,
                    )

                    if not transaction_row11.exists():
                        PointsTransaction.objects.create(
                            transfer_datetime=timezone.now(),
                            sender_telegram=sender.telegram_id,
                            receiver_telegram=receiver.telegram_id,
                            points_transferred=amount,
                            transferor_telegram=transferor.telegram_id,
                            question_id=question.id,
                        )

                        update_quiz_points(
                            telegram_id=sender.telegram_id,
                        )

                        update_quiz_points(
                            telegram_id=receiver.telegram_id,
                        )

                    else:
                        if not transaction_row12.exists():
                            transaction_row11.update(
                                receiver_telegram_id=receiver.telegram_id,
                            )

                        transaction_row12.update(
                            points_transferred=amount,
                            transfer_datetime=timezone.now(),
                            points_datetime=timezone.now(),
                        )

                        update_quiz_points(
                            telegram_id=sender.telegram_id,
                        )

                        update_quiz_points(
                            telegram_id=receiver.telegram_id,
                        )

                    bot.reply_to(
                        message,
                        f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {receiver.full_name} –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –±–∞–ª–ª–æ–≤/–±–∞–ª–ª–∞"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                )

        else:
            bot.reply_to(
                message,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


@bot.message_handler(func=lambda message: '–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∑–∞ —Ç—É—Ä–Ω–∏—Ä' in message.text or message.text == '/add_tournam_points')
def add_points_check(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫—É
    """
    is_AttributeError = False
    uid = message.from_user.id

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        username_id = user_auth_data.first().id
        custom_user = CustomUser.objects.get(
            username_id=username_id
        )

    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            user_auth_data = user_auth_data.first()

            if user_auth_data.role_id == 2:
                markup = types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                )

                btn_main_menu = types.KeyboardButton(
                    text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                )

                btn_logout = types.KeyboardButton(
                    text='–í—ã—Ö–æ–¥'
                )

                markup.add(
                    btn_main_menu,
                    btn_logout
                )

                text = '\n'.join([
                    '–í–≤–µ–¥–¥–∏—Ç–µ —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:',
                    '1 - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ –º–µ—Å—Ç–∞ —Å —à–∞–≥–æ–º 5 –±–∞–ª–ª–æ–≤',
                    '2 - –†–û–¢ (–ü–û–¢) [—É–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ü–∏—Ñ—Ä—É, –¥–µ–ª–∏–º –Ω–∞ /50 –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã]',
                    '3 - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ (–±–æ–Ω—É—Å—ã)',
                    '4 - –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏'
                ])

                response = bot.reply_to(
                    message,
                    text,
                    reply_markup=markup,
                )

                bot.register_next_step_handler(
                    response,
                    process_add_tournament,
                    uid=uid
                )

            else:
                bot.reply_to(
                    message,
                    "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


def process_add_tournament(message, **kwargs):
    """"
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ—Ä —Ç—É—Ä–∞
    """
    uid = kwargs.get('uid')
    points_type = message.text

    if points_type == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif points_type == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        reply = bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞:"
        )

        bot.register_next_step_handler(
            reply,
            process_add_points_type,
            uid=uid,
            points_type=points_type
        )


def process_add_points_type(message, **kwargs):
    """"
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    add_points_type = kwargs.get('points_type')
    uid = kwargs.get('uid')
    tournament_number = message.text

    if tournament_number == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif tournament_number == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if tournament_number.isdigit():
            if int(tournament_number) > 0:
                if add_points_type in ('1', '2', '3', '4'):
                    participants = Authorization.objects.all().filter(
                        role=3
                    )

                    participants_list = []
                    if participants:
                        for participant in participants:
                            part_id = participant.id
                            part_name = participant.full_name
                            part_nick = participant.telegram_nickname
                            part_tel_id = participant.telegram_id

                            participants_list.append(
                                f"{part_id}: {part_name}" + f" (Telegram: {part_nick}, {part_tel_id})"
                            )

                        total_participants = len(participants_list)
                        participants_list = "\n".join(participants_list)

                        bot.reply_to(
                            message,
                            f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n{participants_list}"
                        )

                        if len(participants_list) >= 1:
                            if add_points_type == '1':
                                response = bot.reply_to(
                                    message,
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_1_place,
                                    tournament_number=tournament_number,
                                    uid=uid,
                                    total_participants=total_participants,
                                )

                            elif add_points_type == '2':
                                response = bot.reply_to(
                                    message,
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–∞–ª–ª—ã"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_2_digit,
                                    tournament_number=tournament_number,
                                    uid=uid,
                                )

                            elif add_points_type == '3':
                                response = bot.reply_to(
                                    message,
                                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–∞–ª–ª—ã:"
                                )

                                bot.register_next_step_handler(
                                    response,
                                    process_points_type_3_bonuses,
                                    tournament_number=tournament_number,
                                    uid=uid,
                                )

                            elif add_points_type == '4':
                                if len(participants_list) >= 2:
                                    response = bot.reply_to(
                                        message,
                                        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–±–∏—Ä–∞–µ–º –±–∞–ª–ª—ã –ø–æ –µ–≥–æ ID –≤ –ë–î:"
                                    )

                                    bot.register_next_step_handler(
                                        response,
                                        process_points_type_4_receiver,
                                        tournament_number=tournament_number,
                                        uid=uid,
                                    )

                                else:
                                    bot.reply_to(
                                        message,
                                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
                                    )

                    else:
                        bot.reply_to(
                            message,
                            "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)"
            )


def process_points_type_1_place(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –±—É–¥–µ–º –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã (1-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    total_participants = kwargs.get('total_participants')
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    text1 = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:'
                    text2 = '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ'
                    part_name = participant.full_name
                    part_nick = participant.telegram_nickname
                    part_tel_id = participant.telegram_id

                    response = bot.reply_to(
                        message,
                        f"{text1} {part_name} (Telegram: {part_nick}, {part_tel_id}). {text2} {total_participants}"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_1_place_points,
                        uid=uid,
                        tournament_number=tournament_number,
                        participant=participant,
                        total_participants=total_participants
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_1_place_points(message, **kwargs):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫—É –∏ –∑–∞–Ω–æ—Å–∏—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É PointsTournament (1-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    def create_points_dict(points=100, step=5, max_place=30):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –±–∞–ª–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Ç–∞
        """
        points_dict = {}
        for place in range(1, max_place + 1):
            points_dict[place] = points
            points -= step
            if points < step:
                points = step
        return points_dict

    def calculate_points(points_dict, place):
        """
        –í—ã–≤–æ–¥–∏—Ç –±–∞–ª–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–∞–Ω—è—Ç–æ–≥–æ –º–µ—Å—Ç–∞
        """
        return points_dict.get(place, 0)

    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    participant = kwargs.get('participant')
    total_participants = kwargs.get('total_participants')
    place = message.text

    if place == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif place == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if place.isdigit():
            if int(place) > 0:
                if int(place) <= total_participants:
                    if total_participants <= 30:
                        points_dict = create_points_dict()
                    else:
                        points_dict = create_points_dict(
                            max_place=total_participants
                        )

                    points = calculate_points(
                        points_dict,
                        int(place)
                    )

                    transferor = Authorization.objects.get(
                        telegram_id=uid
                    )

                    tournament = Tournament.objects.get(
                        id=int(tournament_number)
                    )

                    if tournament:
                        participant_row = PointsTournament.objects.filter(
                            sender_telegram_id=participant.telegram_id,
                            transferor_telegram_id=transferor.telegram_id,
                            tournament_id=tournament.id,
                        )

                        if not participant_row.exists():
                            PointsTournament.objects.create(
                                sender_telegram_id=participant.telegram_id,
                                transferor_telegram_id=transferor.telegram_id,
                                tournament_id=tournament.id,
                                tournament_points=points,
                            )

                            update_tournament_points(
                                telegram_id=participant.telegram_id,
                            )

                        else:
                            participant_row.update(
                                tournament_points=points,
                                points_datetime=timezone.now(),
                            )

                            update_tournament_points(
                                telegram_id=participant.telegram_id,
                            )

                        bot.reply_to(
                            message,
                            f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.full_name} –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤ –∑–∞ {place} –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–µ"
                        )

                    else:
                        bot.reply_to(
                            message,
                            "–ü–∞—Ä–∞ '—Ç—É—Ä-–≤–æ–ø—Ä–æ—Å' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                        )

                else:
                    bot.reply_to(
                        message,
                        f"–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {total_participants}"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º)"
            )


def process_points_type_2_digit(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—â—É—é —Ü–∏—Ñ—Ä—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (2-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    response = bot.reply_to(
                        message,
                        "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Ü–∏—Ñ—Ä—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_2_pot,
                        uid=uid,
                        tournament_number=tournament_number,
                        participant=participant,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_2_pot(message, **kwargs):
    """
    –î–µ–ª–∏–º —Ü–∏—Ñ—Ä—É –Ω–∞ 50 –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã. –§–∏–∫—Å–∏—Ä—É–µ–º –±–∞–ª–ª—ã –≤ —Ç–∞–±–ª–∏—Ü–µ PointsTournament (2-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    participant = kwargs.get('participant')
    digit = message.text

    if digit == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif digit == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if digit.isdigit():
            if int(digit) > 0:
                points = int(digit) / 50
                transferor = Authorization.objects.get(
                    telegram_id=uid
                )

                tournament = Tournament.objects.get(
                    id=int(tournament_number)
                )

                if tournament:
                    participant_row = PointsTournament.objects.filter(
                        sender_telegram_id=participant.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        tournament_id=tournament.id,
                    )

                    if not participant_row.exists():
                        PointsTournament.objects.create(
                            sender_telegram_id=participant.telegram_id,
                            transferor_telegram_id=transferor.telegram_id,
                            tournament_id=tournament.id,
                            points_received_or_transferred=points,
                        )

                        update_tournament_points(
                            telegram_id=participant.telegram_id,
                        )

                    else:
                        participant_row.update(
                            points_received_or_transferred=points,
                            points_datetime=timezone.now(),
                        )

                        update_tournament_points(
                            telegram_id=participant.telegram_id,
                        )

                    bot.reply_to(
                        message,
                        f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.full_name} –ø–æ–ª—É—á–∏–ª {int(points)} –±–∞–ª–ª–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—â–µ–π —Ü–∏—Ñ—Ä—ã (—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è)"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—â–µ–π —Ü–∏—Ñ—Ä—ã (–Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ)"
            )


def process_points_type_3_bonuses(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number'),
    participant_id = message.text

    if participant_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif participant_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if participant_id.isdigit():
            if int(participant_id) > 0:
                participant = Authorization.objects.get(
                    id=participant_id
                )

                if participant:
                    response = bot.reply_to(
                        message,
                        f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤–≤–µ–¥–∏—Ç–µ 'random'):"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_3_random,
                        uid=uid,
                        tournament_number=tournament_number,
                        participant=participant
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_3_random(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª 'random' (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    participant = kwargs.get('participant')
    bonuses = message.text

    if bonuses == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif bonuses == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if bonuses.isdigit():
            if int(bonuses) > 0:
                bonuses = int(bonuses)

                process_points_type_3_result(
                    message,
                    uid=uid,
                    tournament_number=tournament_number,
                    participant=participant,
                    bonuses=bonuses
                )

            else:
                bot.reply_to(
                    message,
                    "–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            if bonuses == 'random':
                response = bot.reply_to(
                    message,
                    '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä - 1, 100):'
                )

                bot.register_next_step_handler(
                    response,
                    process_points_type_3_result,
                    uid=uid,
                    tournament_number=tournament_number,
                    participant=participant,
                    bonuses=None
                )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –±–æ–Ω—É—Å–∞"
                )


def process_points_type_3_result(message, **kwargs):
    """
    –ó–∞–Ω–æ—Å–∏—Ç –±–æ–Ω—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É PointsTournament (3-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    participant = kwargs.get('participant')
    bonuses = kwargs.get('bonuses')

    if bonuses is None:
        random_bonuses = message.text

        if random_bonuses == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            main_menu(message)

        elif random_bonuses == "–í—ã—Ö–æ–¥":
            logout(message)

        else:
            random_bonuses = random_bonuses.replace(' ', '').split(',')
            a = random_bonuses[0]
            b = random_bonuses[1]

            if a.isdigit() and b.isdigit():
                a = int(a)
                b = int(b)

                if a > 0 and b > 0:
                    if b > a:
                        bonuses = random.randint(a=a, b=b)

                    else:
                        bot.reply_to(
                            message,
                            "–î–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'a, b'"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–æ–Ω—É—Å–∞"
                )

    if bonuses and tournament_number:
        transferor = Authorization.objects.get(
            telegram_id=uid
        )

        tournament = Tournament.objects.get(
            id=int(tournament_number[0])
        )

        if tournament and transferor:
            participant_row = PointsTournament.objects.filter(
                sender_telegram_id=participant.telegram_id,
                transferor_telegram_id=transferor.telegram_id,
                tournament_id=tournament.id
            )

            if not participant_row:
                PointsTournament.objects.create(
                    sender_telegram_id=participant.telegram_id,
                    transferor_telegram_id=transferor.telegram_id,
                    tournament_id=tournament.id,
                    bonuses=bonuses
                )

                update_tournament_points(
                    telegram_id=participant.telegram_id,
                )

            else:
                participant_row.update(
                    bonuses=bonuses,
                    points_datetime=timezone.now(),
                )

                update_tournament_points(
                    telegram_id=participant.telegram_id,
                )

            bot.reply_to(
                message,
                f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {participant.full_name} –≤ —Ä–∞–∑–º–µ—Ä–µ {bonuses} –±–∞–ª–ª–æ–≤/–±–∞–ª–ª–∞"
            )


def process_points_type_4_receiver(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    sender_id = message.text

    if sender_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif sender_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if sender_id.isdigit():
            if int(sender_id) > 0:
                sender = Authorization.objects.get(
                    id=sender_id
                )

                if sender:
                    response_receiver = bot.reply_to(
                        message,
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ –µ–≥–æ ID –≤ –ë–î:"
                    )

                    bot.register_next_step_handler(
                        response_receiver,
                        process_points_type_4_amount,
                        tournament_number=tournament_number,
                        uid=uid,
                        sender=sender,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"
                    )

            else:
                bot.reply_to(
                    message,
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
                )

        else:
            bot.reply_to(
                message,
                "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def process_points_type_4_amount(message, **kwargs):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    sender = kwargs.get('sender')
    receiver_id = message.text

    if receiver_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif receiver_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        receiver = Authorization.objects.get(
            id=receiver_id
        )

        if int(receiver.telegram_id) != int(sender.telegram_id):
            if receiver:
                if receiver.role_id == 3:
                    response = bot.reply_to(
                        message,
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤:"
                    )

                    bot.register_next_step_handler(
                        response,
                        process_points_type_4_result,
                        tournament_number=tournament_number,
                        uid=uid,
                        sender=sender,
                        receiver=receiver,
                    )

                else:
                    bot.reply_to(
                        message,
                        "–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                )

        else:
            bot.reply_to(
                message,
                "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ"
            )


def process_points_type_4_result(message, **kwargs):
    """
    –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É PointsTournament (4-–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤)
    """
    uid = kwargs.get('uid')
    tournament_number = kwargs.get('tournament_number')
    sender = kwargs.get('sender')
    receiver = kwargs.get('receiver')
    amount = message.text

    if amount == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif amount == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        if amount.isdigit():
            amount = int(amount)
            if amount > 0:
                transferor = Authorization.objects.get(
                    telegram_id=uid
                )

                tournament = Tournament.objects.get(
                    id=int(tournament_number)
                )

                if tournament:
                    transaction_row11 = PointsTournament.objects.filter(
                        sender_telegram_id=sender.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        tournament_id=tournament.id,
                    )

                    transaction_row12 = PointsTournament.objects.filter(
                        sender_telegram_id=sender.telegram_id,
                        receiver_telegram_id=receiver.telegram_id,
                        transferor_telegram_id=transferor.telegram_id,
                        tournament_id=tournament.id,
                    )

                    if not transaction_row11.exists():
                        PointsTournament.objects.create(
                            transfer_datetime=timezone.now(),
                            sender_telegram=sender.telegram_id,
                            receiver_telegram=receiver.telegram_id,
                            points_transferred=amount,
                            transferor_telegram=transferor.telegram_id,
                            tournament_id=tournament.id,
                        )

                        update_tournament_points(
                            telegram_id=sender.telegram_id,
                        )

                        update_tournament_points(
                            telegram_id=receiver.telegram_id,
                        )

                    else:
                        if not transaction_row12.exists():
                            transaction_row11.update(
                                receiver_telegram_id=receiver.telegram_id,
                            )

                        transaction_row12.update(
                            points_transferred=amount,
                            transfer_datetime=timezone.now(),
                            points_datetime=timezone.now(),
                        )

                        update_tournament_points(
                            telegram_id=sender.telegram_id,
                        )

                        update_tournament_points(
                            telegram_id=receiver.telegram_id,
                        )

                    bot.reply_to(
                        message,
                        f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {receiver.full_name} –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –±–∞–ª–ª–æ–≤/–±–∞–ª–ª–∞"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                )

        else:
            bot.reply_to(
                message,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )


def tournament_rating(message, tour_number=None, my_telegram_id=None, sort_param="total_points"):
    """
    –í —Ü–µ–ª–æ–º –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    tour_number - –Ω–æ–º–µ—Ä —Ç—É—Ä–∞
    my_telegram_id - Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
    sort_param - –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é total_points, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤)
       * sort_param='total_points' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤
       * sort_param='total_right_answers' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ sender_telegram_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PointsTransaction
    –ò–¢–û–ì = total_tournament_points + total_rot_pot + total_bonuses + total_transfer_profit
        * total_tournament_points - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –∑–∞–Ω—è—Ç–æ–º—É –º–µ—Å—Ç—É (—Ç–∏–ø 1)
        * total_rot_pot - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–†–û–¢/–ü–û–¢" (—Ç–∏–ø 2)
        * total_bonuses - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–æ–≤ (—Ç–∏–ø 3)
        * total_transfer_profit - –æ–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ (—Ç–∏–ø 4)
            * total_transfer_profit = total_transfer_income - total_transfer_loss
            * total_transfer_income - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
            * total_transfer_loss - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
    """
    telegram_ids = []
    participants = Authorization.objects.filter(role_id=3)

    if participants.exists():
        if participants.count() >= 1:
            for participant in participants:
                telegram_ids.append(
                    participant.telegram_id
                )

    if telegram_ids:
        participants_dict = {}
        senders = None
        question_ids = []
        tour_error = True

        if tour_number:
            if str(tour_number).isdigit():
                if int(tour_number) > 0:
                    questions = Question.objects.filter(
                        tour_id=int(tour_number)
                    )

                    if questions.exists():
                        tour_error = False

                        question_ids = [
                            question.id for question in questions
                        ]

                        senders = PointsTransaction.objects.filter(
                            sender_telegram_id__in=telegram_ids,
                            question_id__in=question_ids
                        )

                    else:
                        bot.reply_to(
                            message,
                            "–ù–æ–º–µ—Ä–∞ —Ç—É—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ù—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞"
                )

        else:
            senders = PointsTransaction.objects.filter(
                sender_telegram_id__in=telegram_ids
            )

        if senders:
            if senders.count() >= 1:
                for telegram_id in telegram_ids:
                    if question_ids:
                        sender_data = PointsTransaction.objects.filter(
                            sender_telegram_id=telegram_id,
                            question_id__in=question_ids
                        )

                    else:
                        sender_data = PointsTransaction.objects.filter(
                            sender_telegram_id=telegram_id
                        )

                    total_tournament_points = 0
                    total_bonuses = 0
                    total_rot_pot = 0
                    total_transfer_loss = 0
                    total_right_answers = 0
                    question_count = 0
                    tours_list = []

                    if sender_data.exists():
                        for item in sender_data:
                            total_tournament_points += item.tournament_points if item.tournament_points else 0
                            total_bonuses += item.bonuses if item.bonuses else 0
                            total_rot_pot += item.points_received_or_transferred if item.points_received_or_transferred else 0
                            total_transfer_loss += item.points_transferred if item.points_transferred else 0
                            total_right_answers += item.is_answered if item.is_answered else 0
                            question_count += item.is_done if item.is_done else 0

                            question_data = Question.objects.filter(
                                id=item.question_id
                            )

                            if question_data.exists():
                                question_data = question_data.first()

                                tours_list.append(
                                    question_data.tour_id
                                )

                        participants_dict[telegram_id] = {
                            'total_tournament_points': total_tournament_points,
                            'total_bonuses': total_bonuses,
                            'total_rot_pot': total_rot_pot,
                            'total_transfer_loss': total_transfer_loss,
                            'total_right_answers': total_right_answers,
                            'question_count': question_count,
                            'tour_count': len(set(tours_list)) if tours_list else 0,
                        }

        if question_ids:
            receivers = PointsTransaction.objects.filter(
                receiver_telegram_id__in=telegram_ids,
                question_id__in=question_ids
            )

        else:
            receivers = PointsTransaction.objects.filter(
                receiver_telegram_id__in=telegram_ids
            )

        if receivers:
            if receivers.count() >= 1:
                for telegram_id in telegram_ids:
                    if question_ids:
                        receiver_data = PointsTransaction.objects.filter(
                            receiver_telegram_id=telegram_id,
                            question_id__in=question_ids
                        )

                    else:
                        receiver_data = PointsTransaction.objects.filter(
                            receiver_telegram_id=telegram_id
                        )

                    total_transfer_income = 0

                    for item in receiver_data:
                        total_transfer_income += item.points_transferred if item.points_transferred else 0

                    if telegram_id in participants_dict:
                        participants_dict[telegram_id]['total_transfer_income'] = total_transfer_income

                    else:
                        participants_dict[telegram_id] = {
                            'total_transfer_income': total_transfer_income,
                        }

        if participants_dict:
            for _, telegram_id_dict in participants_dict.items():
                telegram_id_dict['total_transfer_profit'] = telegram_id_dict.get('total_transfer_income', 0) - \
                                                            telegram_id_dict.get('total_transfer_loss', 0)

                telegram_id_dict['total_points'] = telegram_id_dict.get('total_tournament_points', 0) + \
                                                   telegram_id_dict.get('total_bonuses', 0) + \
                                                   telegram_id_dict.get('total_rot_pot', 0) + \
                                                   telegram_id_dict.get('total_transfer_profit', 0)

            sorted_data = dict(
                sorted(
                    participants_dict.items(), key=lambda x: x[1][sort_param],
                    reverse=True
                )
            )

            ranked_data = {
                key: {**value, 'rank': i + 1} for i, (key, value) in enumerate(sorted_data.items())
            }

            data_list = []
            if ranked_data:
                for telegram_id, rank_data in ranked_data.items():
                    participant = participants.get(
                        telegram_id=telegram_id
                    )

                    data_list.append([
                        rank_data.get('rank', 0),
                        participant.full_name,
                        participant.telegram_nickname,
                        participant.telegram_id,
                        rank_data.get('total_points', 0),
                        rank_data.get('total_tournament_points', 0),
                        rank_data.get('total_rot_pot', 0),
                        rank_data.get('total_bonuses', 0),
                        rank_data.get('total_transfer_profit', 0),
                        rank_data.get('total_transfer_income', 0),
                        rank_data.get('total_transfer_loss', 0),
                        rank_data.get('total_right_answers', 0),
                        rank_data.get('question_count', 0),
                        rank_data.get('tour_count', 0),
                    ])

            if data_list:
                result_list = [[
                    '–ú–µ—Å—Ç–æ',
                    '–§–ò–û',
                    '–ù–∏–∫–Ω–µ–π–º –≤ Telegram',
                    'Telegram ID',
                    '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 1 (—Ä–µ–π—Ç–∏–Ω–≥)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 2 (–†–û–¢/–ü–û–¢)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 3 (–±–æ–Ω—É—Å—ã)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 4 (–ø—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞)',
                    '–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞',
                    '–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤',
                ]] + data_list

                wb = Workbook()
                ws = wb.active

                for idx, row in enumerate(result_list):
                    if not my_telegram_id:
                        ws.append(
                            row
                        )

                    else:
                        if my_telegram_id == row[3] or idx == 0:
                            ws.append(
                                row
                            )

                if my_telegram_id or question_ids:
                    if not len(data_list) >= 1:
                        bot.reply_to(
                            message,
                            "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        )

                wb.save("results.xlsx")

                if not tour_number:
                    if not my_telegram_id:
                        bot.send_document(
                            message.chat.id,
                            document=open('results.xlsx', 'rb'),
                            caption='–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞'
                        )

                        message_text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n'
                        for participant in data_list:

                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant[0]}',
                                f'–§–ò–û: {participant[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant[2]}',
                                f'Telegram ID: {participant[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {participant[11]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {participant[12]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤: {participant[13]}\n\n',
                            ])

                            message_text += text_info

                        bot.reply_to(
                            message,
                            message_text
                        )

                    else:
                        try:
                            idx = list(ranked_data.keys()).index(my_telegram_id)
                            participant_data = result_list[idx + 1]
                            full_name = participant_data[1]
                            telegram_id = participant_data[3]

                            bot.send_document(
                                message.chat.id,
                                document=open('results.xlsx', 'rb'),
                                caption=f'–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ({full_name}, {telegram_id})'
                            )

                            message_text = '–ü–æ–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n'

                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant_data[0]}',
                                f'–§–ò–û: {participant_data[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant_data[2]}',
                                f'Telegram ID: {participant_data[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant_data[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant_data[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant_data[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant_data[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant_data[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant_data[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant_data[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {participant_data[11]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {participant_data[12]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤: {participant_data[13]}\n\n',
                            ])

                            bot.reply_to(
                                message,
                                message_text + text_info
                            )

                        except ValueError:
                            bot.reply_to(
                                message,
                                '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'
                            )

                else:
                    if not tour_error:
                        bot.send_document(
                            message.chat.id,
                            document=open('results.xlsx', 'rb'),
                            caption='–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–∞ ‚Ññ' + str(tour_number)
                        )

                        message_text = f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ —Ç—É—Ä—É ‚Ññ {tour_number}:\n\n'
                        for participant in data_list:

                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant[0]}',
                                f'–§–ò–û: {participant[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant[2]}',
                                f'Telegram ID: {participant[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {participant[11]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {participant[12]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤: {participant[13]}\n\n',
                            ])

                            message_text += text_info

                        bot.reply_to(
                            message,
                            message_text
                        )

    else:
        bot.reply_to(
            message,
            "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"
        )


def points_tournament_rating(message, tour_number=None, my_telegram_id=None):
    """
    –í —Ü–µ–ª–æ–º –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ —Ç—É—Ä–Ω–∏—Ä–∞
    tour_number - –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
    my_telegram_id - Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞

    –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ sender_telegram_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PointsTransaction
    –ò–¢–û–ì = total_tournament_points + total_rot_pot + total_bonuses + total_transfer_profit
        * total_tournament_points - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –∑–∞–Ω—è—Ç–æ–º—É –º–µ—Å—Ç—É (—Ç–∏–ø 1)
        * total_rot_pot - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–†–û–¢/–ü–û–¢" (—Ç–∏–ø 2)
        * total_bonuses - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–æ–≤ (—Ç–∏–ø 3)
        * total_transfer_profit - –æ–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ (—Ç–∏–ø 4)
            * total_transfer_profit = total_transfer_income - total_transfer_loss
            * total_transfer_income - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
            * total_transfer_loss - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
    """
    participants = Authorization.objects.filter(
        role_id=3
    )

    telegram_ids = []
    if participants.exists():
        if participants.count() >= 1:
            for participant in participants:
                telegram_ids.append(
                    participant.telegram_id
                )

    if telegram_ids:
        participants_dict = {}
        senders = None
        tournament_ids = []
        tour_error = True

        if tour_number:
            if str(tour_number).isdigit():
                if int(tour_number) > 0:

                    tournament = Tournament.objects.filter(
                        id=int(tour_number)
                    )

                    if tournament.exists():
                        tour_error = False

                        tournament_ids = [
                            tournament_obj.id for tournament_obj in tournament
                        ]

                        senders = PointsTournament.objects.filter(
                            sender_telegram_id__in=telegram_ids,
                            tournament_id__in=tournament_ids
                        )

                    else:
                        bot.reply_to(
                            message,
                            "–ù–æ–º–µ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        )

                else:
                    bot.reply_to(
                        message,
                        "–ù—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞"
                )

        else:
            senders = PointsTournament.objects.filter(
                sender_telegram_id__in=telegram_ids
            )

        if senders:
            if senders.count() >= 1:
                for telegram_id in telegram_ids:
                    if tournament_ids:
                        sender_data = PointsTournament.objects.filter(
                            sender_telegram_id=telegram_id,
                            tournament_id__in=tournament_ids
                        )

                    else:
                        sender_data = PointsTournament.objects.filter(
                            sender_telegram_id=telegram_id
                        )

                    total_tournament_points = 0
                    total_bonuses = 0
                    total_rot_pot = 0
                    total_transfer_loss = 0
                    tours_list = []

                    if sender_data.exists():
                        for item in sender_data:
                            total_tournament_points += item.tournament_points if item.tournament_points else 0
                            total_bonuses += item.bonuses if item.bonuses else 0
                            total_rot_pot += item.points_received_or_transferred if item.points_received_or_transferred else 0
                            total_transfer_loss += item.points_transferred if item.points_transferred else 0

                            tournament_data = Tournament.objects.filter(
                                id=item.tournament_id
                            )

                            if tournament_data.exists():
                                tournament_data = tournament_data.first()

                                tours_list.append(
                                    tournament_data.id
                                )

                        participants_dict[telegram_id] = {
                            'total_tournament_points': total_tournament_points,
                            'total_bonuses': total_bonuses,
                            'total_rot_pot': total_rot_pot,
                            'total_transfer_loss': total_transfer_loss,
                            'tour_count': len(set(tours_list)) if tours_list else 0,
                        }

        if tournament_ids:
            receivers = PointsTournament.objects.filter(
                receiver_telegram_id__in=telegram_ids,
                tournament_id__in=tournament_ids
            )

        else:
            receivers = PointsTournament.objects.filter(
                receiver_telegram_id__in=telegram_ids
            )

        if receivers:
            if receivers.count() >= 1:
                for telegram_id in telegram_ids:

                    if tournament_ids:
                        receiver_data = PointsTournament.objects.filter(
                            receiver_telegram_id=telegram_id,
                            tournament_id__in=tournament_ids
                        )

                    else:
                        receiver_data = PointsTournament.objects.filter(
                            receiver_telegram_id=telegram_id
                        )

                    total_transfer_income = 0

                    for item in receiver_data:
                        total_transfer_income += item.points_transferred if item.points_transferred else 0

                    if telegram_id in participants_dict:
                        participants_dict[telegram_id]['total_transfer_income'] = total_transfer_income

                    else:
                        participants_dict[telegram_id] = {
                            'total_transfer_income': total_transfer_income,
                        }

        if participants_dict:
            for _, telegram_id_dict in participants_dict.items():
                telegram_id_dict['total_transfer_profit'] = telegram_id_dict.get('total_transfer_income', 0) - \
                                                            telegram_id_dict.get('total_transfer_loss', 0)

                telegram_id_dict['total_points'] = telegram_id_dict.get('total_tournament_points', 0) + \
                                                   telegram_id_dict.get('total_bonuses', 0) + \
                                                   telegram_id_dict.get('total_rot_pot', 0) + \
                                                   telegram_id_dict.get('total_transfer_profit', 0)

            sorted_data = dict(
                sorted(
                    participants_dict.items(), key=lambda x: x[1]['total_points'],
                    reverse=True
                )
            )

            ranked_data = {
                key: {**value, 'rank': i + 1} for i, (key, value) in enumerate(sorted_data.items())
            }

            data_list = []
            if ranked_data:
                for telegram_id, rank_data in ranked_data.items():
                    participant = participants.get(
                        telegram_id=telegram_id
                    )

                    data_list.append([
                        rank_data.get('rank', 0),
                        participant.full_name,
                        participant.telegram_nickname,
                        participant.telegram_id,
                        rank_data.get('total_points', 0),
                        rank_data.get('total_tournament_points', 0),
                        rank_data.get('total_rot_pot', 0),
                        rank_data.get('total_bonuses', 0),
                        rank_data.get('total_transfer_profit', 0),
                        rank_data.get('total_transfer_income', 0),
                        rank_data.get('total_transfer_loss', 0),
                        rank_data.get('tour_count', 0),
                    ])

            if data_list:
                result_list = [[
                    '–ú–µ—Å—Ç–æ',
                    '–§–ò–û',
                    '–ù–∏–∫–Ω–µ–π–º –≤ Telegram',
                    'Telegram ID',
                    '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 1 (—Ä–µ–π—Ç–∏–Ω–≥)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 2 (–†–û–¢/–ü–û–¢)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 3 (–±–æ–Ω—É—Å—ã)',
                    '–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É 4 (–ø—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞)',
                    '–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞',
                    '–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤',
                ]] + data_list

                wb = Workbook()
                ws = wb.active

                for idx, row in enumerate(result_list):
                    if not my_telegram_id:
                        ws.append(
                            row
                        )

                    else:
                        if my_telegram_id == row[3] or idx == 0:
                            ws.append(
                                row
                            )

                if my_telegram_id or tournament_ids:
                    if not len(data_list) >= 1:
                        bot.reply_to(
                            message,
                            "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        )

                wb.save("results.xlsx")

                if not tour_number:
                    if not my_telegram_id:
                        bot.send_document(
                            message.chat.id,
                            document=open('results.xlsx', 'rb'),
                            caption='–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞'
                        )

                        message_text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n'
                        for participant in data_list:

                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant[0]}',
                                f'–§–ò–û: {participant[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant[2]}',
                                f'Telegram ID: {participant[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {participant[11]}\n\n',
                            ])

                            message_text += text_info

                        bot.reply_to(
                            message,
                            message_text
                        )

                    else:
                        try:
                            idx = list(ranked_data.keys()).index(my_telegram_id)
                            participant_data = result_list[idx + 1]
                            full_name = participant_data[1]
                            telegram_id = participant_data[3]

                            bot.send_document(
                                message.chat.id,
                                document=open('results.xlsx', 'rb'),
                                caption=f'–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ({full_name}, {telegram_id})'
                            )

                            message_text = '–ü–æ–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n'

                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant_data[0]}',
                                f'–§–ò–û: {participant_data[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant_data[2]}',
                                f'Telegram ID: {participant_data[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant_data[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant_data[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant_data[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant_data[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant_data[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant_data[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant_data[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {participant_data[11]}\n\n',
                            ])

                            bot.reply_to(
                                message,
                                message_text + text_info
                            )

                        except ValueError:
                            bot.reply_to(
                                message,
                                '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'
                            )

                else:
                    if not tour_error:
                        bot.send_document(
                            message.chat.id,
                            document=open('results.xlsx', 'rb'),
                            caption='–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ‚Ññ' + str(tour_number)
                        )

                        message_text = f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ —Ç—É—Ä–Ω–∏—Ä—É ‚Ññ {tour_number}:\n\n'

                        for participant in data_list:
                            text_info = '\n'.join([
                                f'–ú–µ—Å—Ç–æ: {participant[0]}',
                                f'–§–ò–û: {participant[1]}',
                                f'–ù–∏–∫–Ω–µ–π–º –≤ Telegram: {participant[2]}',
                                f'Telegram ID: {participant[3]}',
                                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {participant[4]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {participant[5]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –†–û–¢/–ü–û–¢: {participant[6]}',
                                f'–ë–∞–ª–ª—ã, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–æ –±–æ–Ω—É—Å–∞–º: {participant[7]}',
                                f'–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±–∞–ª–ª–æ–≤: {participant[8]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[9]}',
                                f'–°—É–º–º–∞—Ä–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {participant[10]}',
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {participant[11]}\n\n',
                            ])

                            message_text += text_info

                        bot.reply_to(
                            message,
                            message_text
                        )

    else:
        bot.reply_to(
            message,
            "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)' in message.text or message.text == '/quiz_rating')
def tournament_rating_realization(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    is_AttributeError = False
    uid = message.from_user.id

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            bot.send_message(
                message.chat.id,
                "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º",
                reply_markup=markup
            )

            tournament_rating(
                message=message
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


@bot.message_handler(func=lambda message: '–ú–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)' in message.text or message.text=='/my_quiz_rating')
def participant_question(message):
    """"
    –§–∏–∫—Å–∏—Ä—É–µ—Ç Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    participants = Authorization.objects.all().filter(
        role=3
    )

    participants_list = []
    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            if participants.exists():
                for participant in participants:
                    part_id = participant.id
                    part_name = participant.full_name
                    part_nick = participant.telegram_nickname
                    part_tel_id = participant.telegram_id

                    participants_list.append(
                        f"{part_id}: {part_name}" + f" (Telegram: {part_nick}, {part_tel_id})"
                    )

                markup = types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                )

                btn_main_menu = types.KeyboardButton(
                    text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                )

                btn_logout = types.KeyboardButton(
                    text='–í—ã—Ö–æ–¥'
                )

                markup.add(
                    btn_main_menu,
                    btn_logout
                )

                participants_list = "\n".join(
                    participants_list
                )

                bot.reply_to(
                    message,
                    f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n{participants_list}",
                    reply_markup=markup,
                )

                response = bot.reply_to(
                    message,
                    "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID (–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –≤—ã—à–µ —Å–ø–∏—Å–∫–µ):"
                )

                bot.register_next_step_handler(
                    response,
                    process_participant_rating_question,
                )

            else:
                bot.reply_to(
                    message,
                    "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


def process_participant_rating_question(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    telegram_id = message.text

    if telegram_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif telegram_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        tournament_rating(
            message=message,
            my_telegram_id=telegram_id
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–∞ –ø–æ –±–∞–ª–ª–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)' in message.text or message.text == '/quiz_tour_stat')
def tour_question(message):
    """"
    –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ —Ç—É—Ä–∞
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            response = bot.reply_to(
                message,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                reply_markup=markup,
            )

            bot.register_next_step_handler(
                response,
                process_tour_question,
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


def process_tour_question(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    tour_number = message.text

    if tour_number == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif tour_number == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        tournament_rating(
            message,
            tour_number
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ç—É—Ä–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)' in message.text or message.text == '/quiz_tours_stat')
def tours_output(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ —Å—Ä–∞–∑—É –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            tours = Question.objects.all().values_list(
                'tour_id',
                flat=True
            ).distinct()

            if tours.exists():
                bot.reply_to(
                     message,
                    '–í—ã–≤–æ–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–æ–≤',
                    reply_markup=markup
                )

                for tour in tours:
                    tournament_rating(
                        message,
                        tour_number=tour,
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)' in message.text or message.text=='/quiz_answers_rating')
def answers_rating(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            bot.reply_to(
                message,
                '–í—ã–≤–æ–∂—É —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
                reply_markup=markup
            )

            tournament_rating(
                message,
                sort_param='total_right_answers'
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)' in message.text or message.text == '/tournament_rating')
def tournament_rating_realization2(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    is_AttributeError = False
    uid = message.from_user.id

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            bot.send_message(
                message.chat.id,
                "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º",
                reply_markup=markup
            )

            points_tournament_rating(
                message=message
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


@bot.message_handler(func=lambda message: '–ú–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)' in message.text or message.text == '/my_tournam_rating')
def participant_question2(message):
    """"
    –§–∏–∫—Å–∏—Ä—É–µ—Ç Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    """
    is_AttributeError = False
    uid = message.from_user.id

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    participants = Authorization.objects.all().filter(
        role=3
    )

    participants_list = []
    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            if participants.exists():
                for participant in participants:
                    part_id = participant.id
                    part_name = participant.full_name
                    part_nick = participant.telegram_nickname
                    part_tel_id = participant.telegram_id

                    participants_list.append(
                        f"{part_id}: {part_name}" + f" (Telegram: {part_nick}, {part_tel_id})"
                    )

                markup = types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                )

                btn_main_menu = types.KeyboardButton(
                    text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                )

                btn_logout = types.KeyboardButton(
                    text='–í—ã—Ö–æ–¥'
                )

                markup.add(
                    btn_main_menu,
                    btn_logout
                )

                participants_list = "\n".join(
                    participants_list
                )

                bot.reply_to(
                    message,
                    f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n{participants_list}",
                    reply_markup=markup,
                )

                response = bot.reply_to(
                    message,
                    "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID (–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –≤—ã—à–µ —Å–ø–∏—Å–∫–µ):"
                )

                bot.register_next_step_handler(
                    response,
                    process_participant_rating_question2,
                )

            else:
                bot.reply_to(
                    message,
                    "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


def process_participant_rating_question2(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    telegram_id = message.text

    if telegram_id == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif telegram_id == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        points_tournament_rating(
            message,
            my_telegram_id=telegram_id
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –±–∞–ª–ª–∞–º (—Ç—É—Ä–Ω–∏—Ä)' in message.text or message.text == '/tournam_stat')
def tour_question2(message):
    """"
    –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ —Ç—É—Ä–Ω–∏—Ä–∞
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            response = bot.reply_to(
                message,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                reply_markup=markup,
            )

            bot.register_next_step_handler(
                response,
                process_tour_question2,
            )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup
        )


def process_tour_question2(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ç—É—Ä–∞ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    tour_number = message.text

    if tour_number == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        main_menu(message)

    elif tour_number == "–í—ã—Ö–æ–¥":
        logout(message)

    else:
        points_tournament_rating(
            message,
            tour_number
        )


@bot.message_handler(func=lambda message: '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ç—É—Ä–Ω–∏—Ä–∞–º (—Ç—É—Ä–Ω–∏—Ä)' in message.text or message.text == '/tournams_stat')
def tours_output2(message):
    """"
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ —Å—Ä–∞–∑—É –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞
    """
    is_AttributeError = False
    uid = message.from_user.id
    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if user_auth_data.exists() and not is_AttributeError:
        if custom_user.is_authorized:

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_main_menu = types.KeyboardButton(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            )

            btn_logout = types.KeyboardButton(
                text='–í—ã—Ö–æ–¥'
            )

            markup.add(
                btn_main_menu,
                btn_logout
            )

            tours = Tournament.objects.all().values_list(
                'id',
                flat=True
            ).distinct()

            if tours.exists():
                bot.reply_to(
                     message,
                    '–í—ã–≤–æ–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–æ–≤',
                    reply_markup=markup
                )

                for tour in tours:
                    points_tournament_rating(
                        message,
                        tour_number=tour
                    )

            else:
                bot.reply_to(
                    message,
                    "–ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                reply_markup=markup,
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_register = types.KeyboardButton(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        )

        btn_login = types.KeyboardButton(
            text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        )

        btn_password = types.KeyboardButton(
            text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
        )

        markup.add(
            btn_register,
            btn_login,
            btn_password
        )

        bot.reply_to(
            message,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É' in message.text or message.text == '/start_quiz')
def tour_question(message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    """
    questions = Question.objects.all()

    if questions.exists():
        tours = questions.values_list(
            'tour_id',
            flat=True
        ).distinct()

        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        for tour in tours:
            markup.add(types.KeyboardButton(
                text=str(tour)
                )
            )

        reply = bot.reply_to(
            message,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:',
            reply_markup=markup,
        )

        bot.register_next_step_handler(
            reply,
            start_quiz,
            tours=[str(tour) for tour in tours],
        )

    else:
        bot.reply_to(
            message,
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"
        )


def start_quiz(message, tours, question_number=None, tour_id=None, question_id=None):
    """"
    –ù–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –µ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç question_number
    question_number - –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ (ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Question)
    """

    is_AttributeError = False
    is_tour_number = False
    is_over = False
    is_repeat = False

    uid = message.from_user.id

    if not tour_id:
        tour_input = message.text

        if tour_input in tours:
            is_tour_number = True

    else:
        if tour_id in tours:
            is_tour_number = True

    user_auth_data = Authorization.objects.filter(
        telegram_id=uid
    )

    try:
        custom_user = CustomUser.objects.get(
            username_id=user_auth_data.first().id
        )
    except AttributeError as e:
        is_AttributeError = True

    if is_tour_number:
        if user_auth_data.exists() and not is_AttributeError:
            if custom_user.is_authorized:
                if custom_user.role_id == 3:
                    markup = types.ReplyKeyboardMarkup(
                        resize_keyboard=True
                    )

                    btn_main_menu = types.KeyboardButton(
                        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                    )

                    btn_logout = types.KeyboardButton(
                        text='–í—ã—Ö–æ–¥'
                    )

                    markup.add(
                        btn_main_menu,
                        btn_logout
                    )

                    questions = Question.objects.filter(
                        tour_id=tour_input if not tour_id else tour_id
                    )

                    if questions.exists():

                        if not question_id:
                            question_ids = [
                                question.id for question in questions
                            ]
                            question_id = min(question_ids)

                        if not question_number:
                            question_number = 1

                            participant = PointsTransaction.objects.filter(
                                sender_telegram_id=message.from_user.id,
                                question_id__in=question_ids
                            )

                            if participant.exists():
                                is_done_list = participant.values_list(
                                    'is_done',
                                    flat=True
                                )

                                sum_is_done = len(
                                    is_done_list
                                )

                                if sum_is_done == questions.count():
                                    is_over = True
                                    is_repeat = True
                                    question = None

                                    markup = types.ReplyKeyboardMarkup(
                                        resize_keyboard=True
                                    )

                                    btn_main_menu = types.KeyboardButton(
                                        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                                    )

                                    btn_logout = types.KeyboardButton(
                                        text='–í—ã—Ö–æ–¥'
                                    )

                                    markup.add(
                                        btn_main_menu,
                                        btn_logout
                                    )

                                    bot.reply_to(
                                        message,
                                        '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                        reply_markup=markup,
                                    )

                            else:
                                bot.reply_to(
                                    message,
                                    '–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
                                )

                            if not is_over:
                                question = Question.objects.filter(
                                    tour_question_number_id=question_number,
                                    tour_id=tour_input if not tour_id else tour_id
                                )

                        else:
                            question = Question.objects.filter(
                                tour_question_number_id=question_number,
                                tour_id=tour_input if not tour_id else tour_id
                            )

                    else:
                        question = None

                        bot.reply_to(
                            message,
                            '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã'
                        )

                    if question:
                        tour = question.first().tour_id
                        tour_question_number_id = question.first().tour_question_number_id
                        question_text = question.first().question_text
                        answer_explanation = question.first().explanation[1:][:-1]

                        answer_dict = {
                            'A': question.first().answer_a,
                            'B': question.first().answer_b,
                            'C': question.first().answer_c,
                            'D': question.first().answer_d,
                        }

                        correct_answer = answer_dict.get(question.first().correct_answer)

                        participant = PointsTransaction.objects.filter(
                            sender_telegram_id=message.from_user.id,
                            question_id=question_number,
                        )

                        if not participant.exists() or participant.first().is_done == 0:
                            bot.reply_to(
                                message,
                                text=f"### –¢—É—Ä ‚Ññ {tour} ### –í–æ–ø—Ä–æ—Å ‚Ññ {tour_question_number_id} ###",
                            )

                        markup = types.ReplyKeyboardMarkup(row_width=2)
                        for option in list(answer_dict.values()):
                            button = types.KeyboardButton(option)
                            markup.add(button)

                        bot.send_message(
                            message.chat.id,
                            text=question_text,
                            reply_markup=markup,
                        )

                        image_path = question.first().image

                        if image_path:
                            try:
                                with open(image_path.path, 'rb') as photo:
                                    bot.send_photo(chat_id=message.chat.id, photo=photo)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

                        try:
                            bot.register_next_step_handler(
                                message,
                                handle_answer,
                                correct_answer=correct_answer,
                                question_number=question_number,
                                answer_explanation=answer_explanation,
                                tours=tours,
                                tour_id=tour_input if not tour_id else tour_id,
                                question_id=question_id
                            )
                        except TypeError:
                            pass

                    else:
                        if not is_repeat:
                            markup = types.ReplyKeyboardMarkup(
                                resize_keyboard=True
                            )

                            btn_main_menu = types.KeyboardButton(
                                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                            )

                            btn_logout = types.KeyboardButton(
                                text='–í—ã—Ö–æ–¥'
                            )

                            markup.add(
                                btn_main_menu,
                                btn_logout
                            )

                            bot.reply_to(
                                message,
                                "–ù–∞ —ç—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ç—É—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
                                reply_markup=markup,
                            )

                else:
                    bot.reply_to(
                        message,
                        "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞"
                    )

            else:
                markup = types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                )

                btn_register = types.KeyboardButton(
                    text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
                )

                btn_login = types.KeyboardButton(
                    text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                )

                btn_password = types.KeyboardButton(
                    text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
                )

                markup.add(
                    btn_register,
                    btn_login,
                    btn_password
                )

                bot.reply_to(
                    message,
                    "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /login",
                    reply_markup=markup,
                )

        else:
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )

            btn_register = types.KeyboardButton(
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )

            btn_login = types.KeyboardButton(
                text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            )

            btn_password = types.KeyboardButton(
                text='–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å'
            )

            markup.add(
                btn_register,
                btn_login,
                btn_password
            )

            bot.reply_to(
                message,
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /register",
                reply_markup=markup
            )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True
        )

        btn_main_menu = types.KeyboardButton(
            text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        )

        btn_logout = types.KeyboardButton(
            text='–í—ã—Ö–æ–¥'
        )

        markup.add(
            btn_main_menu,
            btn_logout
        )

        bot.reply_to(
            message,
            "–¢—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=markup,
        )


@bot.message_handler(func=lambda message: True)
def handle_answer(message, correct_answer=None, answer_explanation=None, question_number=None, tours=None, tour_id=None, question_id=None):
    """"
    –§–∏–∫—Å–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    """
    uid = message.from_user.id

    participant = PointsTransaction.objects.filter(
        sender_telegram_id=uid,
        question_id=question_id,
    )

    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)

    elif message.text == '–í—ã—Ö–æ–¥':
        logout(message)

    elif message.text == correct_answer:
        bot.send_message(
            message.chat.id,
            f"–í–µ—Ä–Ω–æ! \n{answer_explanation}", reply_markup=types.ReplyKeyboardRemove()
        )

        if not participant.exists():
            PointsTransaction.objects.create(
                sender_telegram_id=uid,
                question_id=question_id,
                is_answered=1,
                is_done=1,
            )

        else:
            if participant.first().is_done == 0:
                PointsTransaction.objects.filter(
                    sender_telegram_id=uid,
                    question_id=question_id,
                ).update(
                    is_answered=1,
                    is_done=1,
                )

        start_quiz(
            message,
            tours=tours,
            tour_id=tour_id,
            question_number=question_number+1,
            question_id=question_id+1
        )

    else:
        bot.send_message(
            message.chat.id,
            f"–ù–µ–≤–µ—Ä–Ω–æ! \n{answer_explanation}", reply_markup=types.ReplyKeyboardRemove()
        )

        if not participant.exists():
            PointsTransaction.objects.create(
                sender_telegram_id=uid,
                question_id=question_id,
                is_answered=0,
                is_done=1,
            )

        else:
            PointsTransaction.objects.filter(
                sender_telegram_id=uid,
                question_id=question_id,
            ).update(
                is_answered=0,
                is_done=1,
            )

        start_quiz(
            message,
            tours=tours,
            tour_id=tour_id,
            question_number=question_number+1,
            question_id=question_id + 1
        )


if __name__ == "__main__":
    bot.polling()

    # while True:
    #     try:
    #         bot.polling()
    #     except Exception as e:
    #         print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    #         time.sleep(10)
